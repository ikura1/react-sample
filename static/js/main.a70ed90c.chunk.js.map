{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","backdrop","zIndex","drawer","color","App","classes","React","useState","open","setOpen","window","className","Alert","severity","style","display","fontSize","ndef","NDEFReader","controller","cancelNfc","abort","readNfc","a","AbortController","scan","signal","onreading","message","alert","IconButton","backgroundColor","onClick","Backdrop","CircularProgress","size","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a70ed90c.chunk.js","sourcesContent":["import React from \"react\"\nimport Backdrop from \"@material-ui/core/Backdrop\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport NfcIcon from \"@material-ui/icons/Nfc\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\"\n\nimport \"./App.css\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: \"#fff\",\n    },\n  })\n)\nfunction App() {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  if (!(\"NDEFReader\" in window)) {\n    return (\n      <div className=\"App\">\n        <Alert severity=\"error\" style={{ display: \"flex\" }}>\n          WebNFC is not Supported\n        </Alert>\n        <header className=\"App-header\">\n          <ErrorIcon style={{ color: \"white\", fontSize: 200 }} />\n        </header>\n      </div>\n    )\n  }\n  const ndef = new NDEFReader()\n  let controller: any = null\n\n  const cancelNfc = () => {\n    if (controller) {\n      controller.abort()\n      controller = null\n    }\n    setOpen(false)\n  }\n\n  const readNfc = async () => {\n    setOpen(!open)\n    controller = new AbortController()\n    await ndef.scan({ signal: controller.signal })\n    ndef.onreading = ({ message }) => {\n      alert(`Message read from a NFC tag: ${message}`)\n      cancelNfc()\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* Clicked NFC Reader */}\n        <IconButton\n          style={{\n            backgroundColor: \"#4c5361\",\n          }}\n          onClick={readNfc}\n        >\n          <NfcIcon style={{ color: \"white\", fontSize: 200 }} />\n        </IconButton>\n        {/* Loading Popup (Replace or (hide and show))*/}\n        <Backdrop className={classes.backdrop} open={open} onClick={cancelNfc}>\n          <CircularProgress size={100} color=\"inherit\" />\n        </Backdrop>\n        {/* Loaded Result Popup */}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}